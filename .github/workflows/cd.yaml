name: main

on:
  workflow_call:
    inputs:
      region:
        required: true
        type: string
      environment:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
      ecs_cluster:
        required: true
        type: string
      ecs_service:
        required: true
        type: string
      ecs_task_definition:
        required: true
        type: string
      container_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

permissions:
  contents: read

jobs:
  deploy:
    name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ inputs.ecs_task_definition }}
        container-name: ${{ inputs.container_name }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ inputs.ecs_service }}
        cluster: ${{ inputs.ecs_cluster }}
        wait-for-service-stability: true
