name: ecs_cd

on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
      app_env:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
      ecs_cluster:
        required: true
        type: string
      ecs_service:
        required: true
        type: string
      ecs_task_definition:
        required: true
        type: string
      container_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

permissions:
  contents: read

jobs:
  deploy:
    name: ${{ inputs.app_env }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.app_env }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configurando credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Realizando login no ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag e push da imagem para o ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Criação da task definition com a imagem do ECR
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ inputs.ecs_task_definition }}
          container-name: ${{ inputs.container_name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy da task definition no ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ecs_service }}
          cluster: ${{ inputs.ecs_cluster }}
          wait-for-service-stability: true